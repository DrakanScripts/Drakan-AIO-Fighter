const
  LOC_LOST = -1;
  LOC_LUMBRIDGE = 0;
  LOC_LUMBRIDGE_VILLAGE = 1;
  LOC_LUMBRIDGE_STORE = 2;

  PATH_LUMBRIDGE_STORE = 0;

function GetLocation: Integer;
begin
  Result := LOC_LOST;

  if(R_SelfInBox(IntToBox(3217, 3227, 3225, 3209)))then
  begin
    Result := LOC_LUMBRIDGE;
    Exit;
  end;

  if(R_SelfInBox(IntToBox(3212, 3243, 3218, 3239)))then
  begin
    Result := LOC_LUMBRIDGE_STORE;
    Exit;
  end;

  if(R_SelfInBox(IntToBox(3188, 3258, 3221, 3237)))then
  begin
    Result := LOC_LUMBRIDGE_VILLAGE;
    Exit;
  end;
end;

function OnPath(Path: TTileArray): Boolean;
var
  I, Dist, MinDist, CurrNode: Integer;
  MyTile: TTile;
  Blocks: array of TIntegerArray;
begin
  Result := False;

  //find the closest node.
  if not R_GetCollisionMap(Blocks)then
  begin
    Debug('Unable to retrieve collision map.', 'OnPath');
    Exit;
  end;
  MyTile := R_GetMyPos;
  MinDist := MAXINT;
  CurrNode := -1;
  for I := 0 to High(Path)do
  begin
    Dist := R_DistanceTile(MyTile, Path[I])
    if(Dist < MinDist) and R_CanReachEx(Path[I], False, Blocks)then
    begin
      CurrNode := I;
      MinDist := Dist;
    end;
  end;

  if(CurrNode = -1)then
  begin
    Debug('No suitable node found.', 'OnPath');
    Exit;
  end;

  {find the "real distance" between closest node and player. Distance must be
  less than or equal to 15.}
  Dist := R_PathLengthBetweenEx(MyTile, Path[CurrNode], False, Blocks);
  Result := Dist <= 30;
end;

function WalkNodes(Path: TTileArray): Boolean;
var
  I, Dist, MinDist, MyDist, CurrNode: Integer;
  Blocks: array of TIntegerArray;
  MyTile: TTile;
begin
  Result := False;
  if not R_LoggedIn then
    Exit;

  //Find the closest node.
  if not R_GetCollisionMap(Blocks)then
  begin
    Debug('Unable to retrieve collision map.', 'WalkNodes');
    Exit;
  end;
  MyTile := R_GetMyPos;
  MinDist := MAXINT;
  CurrNode := -1;
  for I := 0 to High(Path)do
  begin
    Dist := R_DistanceTile(MyTile, Path[I])
    if(Dist < MinDist) and R_CanReachEx(Path[I], False, Blocks)then
    begin
      CurrNode := I;
      MinDist := Dist;
    end;
  end;

  //check if a better node can be selected (closer to source).
  if(CurrNode < High(Path))then
  begin
    if(R_DistanceTile(MyTile, Path[CurrNode]) <= 7)then
      Inc(CurrNode)
    else begin
      MyDist := R_PathLengthBetweenEx(MyTile, Path[CurrNode+1], False, Blocks);
      Dist := R_PathLengthBetweenEx(Path[CurrNode], Path[CurrNode+1], False, Blocks);
      if(MyDist < Dist)then
        Inc(CurrNode);
    end;
  end;

  //Debug('Closest node was located at index '+ToStr(CurrNode)+'.', 'WalkNodes');
  Result := CurrNode <> -1;
  if not Result then
  begin
    Debug('No nodes reachable from current location.', 'WalkNodes');
    Exit;
  end;

  for I := CurrNode to High(Path)do
  begin
    if not R_WindWalk(Path[I])then
      Break;
  end;

  R_WaitToStopMoving(60000);
  Result := (R_DistanceFromTile(Path[High(Path)]) <= 5);
end;

function LoadNodes(Which: Integer): TTileArray;
begin
  case Which of
    PATH_LUMBRIDGE_STORE:
      Result := [
        Point(3223, 3219), Point(3228, 3230), Point(3225, 3238),
        Point(3214, 3242)
      ];
    else
      Debug('Invalid path index.', 'LoadPath');
  end;
end;

function TravelTo_Home: Boolean;
var
  SpellBook: TInterfaceChild;
  Animated: Boolean;
  X, Y, T: Integer;
begin
  Result := GetLocation = LOC_LUMBRIDGE;
  if Result then
    Exit;
  Debug('Teleporting to Lumbridge.', 'Travel');
  if not R_GameTab(RTAB_SPELLBOOK)then
    Exit;
  SpellBook := R_GetInterfaceChild(192, 24);
  while not FindColorTolerance(X, Y, 14724502, SpellBook.Bounds.X1, SpellBook.Bounds.Y1,
                               SpellBook.Bounds.X2, SpellBook.Bounds.Y2, 10)do
    Wait(100+Random(100));
  Wait(200+Random(600));
  R_ClickInterface(SpellBook, 1);

  MarkTime(T);
  while not R_Animating do
  begin
    Wait(300+Random(100));
    if(TimeFromMark(T) > 5000)then
      Break;
  end;

  if(TimeFromMark(T) <= 5000)then
    Animated := True;

  MarkTime(T);
  while R_Animating do
  begin
    Wait(600+Random(100));
    if(TimeFromMark(T) > 10000)then
      Break;
  end;

  if(Animated)then
  begin
    MarkTime(T);
    while not(GetLocation = LOC_LUMBRIDGE)do
    begin
      Wait(600+Random(100));
      if(TimeFromMark(T) > 5000)then
        Break;
    end;
  end;

  Result := GetLocation = LOC_LUMBRIDGE;
  case Result of
    True: Debug('Landed in Lumbridge!', 'Travel');
    False: Debug('Failed to teleport to Lumbridge.', 'Travel');
  end;
end;

function TravelTo_LumbridgeStore: boolean;
var
  Path: TTileArray;
begin
  Result := GetLocation = LOC_LUMBRIDGE_STORE;
  if Result then
    Exit;

  Path := LoadNodes(PATH_LUMBRIDGE_STORE);

  Debug('Traveling to the lumbridge general store!', 'Travel');
  if not(GetLocation = LOC_LUMBRIDGE_VILLAGE)then
    if not(OnPath(Path))then
      TravelTo_Home;

  WalkNodes(Path);

  Result := GetLocation = LOC_LUMBRIDGE_STORE;

  case Result of
    true: Debug('Arrived at the general store in Lumbridge!', 'Travel');
    false: Debug('Failed to reach the general store in Lumbridge.', 'Travel');
  end;
end;

function Travel(Destination: Integer): Boolean;
begin
  Result := False;
  if not R_LoggedIn then
    Exit;

  case Destination of
    LOC_LUMBRIDGE: Result := TravelTo_Home;
    LOC_LUMBRIDGE_STORE: Result := TravelTo_LumbridgeStore;
  end;
end;
