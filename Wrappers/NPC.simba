type
  TOpenNPC = record
    Obj, NPCDef: Integer;
    ID, Level, Height: Integer;
    Name: String;
  end;
  TOpenNPCArray = array of TOpenNPC;

function NPC_Create(Reference: Integer): TOpenNPC;
begin
  with Result do
  begin
    Obj := Reference;
    NPCDef := 0;
    ID := -1;
    Level := -1;
    Height := -1;
    Name := '';
  end;
end;

procedure NPC_Free(NPC: TOpenNPC);
begin
  if not SmartIsNull(NPC.Obj)then
    SmartFreeObject(NPC.Obj);
  if not SmartIsNull(NPC.NPCDef)then
    SmartFreeObject(NPC.NPCDef);
end;

//functions under the renderable class.
function NPC_GetPos(NPC: TOpenNPC): TTile;
begin
  Result := Point(0, 0);
  Result.X := SmartGetFieldInt(0, hook_static_BaseX) + (SmartGetFieldInt(NPC.Obj, hook_animable_PixelX) / 512);
  Result.Y := SmartGetFieldInt(0, hook_static_BaseY) + (SmartGetFieldInt(NPC.Obj, hook_animable_PixelY) / 512);
end;
//////////////////////////////////////


//functions under the character class.
function NPC_GetHeight(NPC: TOpenNPC): Integer;
begin
  Result := -1;
  if(NPC.Height = -1)then
    NPC.Height := iAbs(SmartGetFieldInt(NPC.Obj, hook_character_GetHeight));
  Result := NPC.Height;
end;
//////////////////////////////////////



//functions under the NPC Class.
function NPC_GetNPCDef(NPC: TOpenNPC): Integer;
begin
  if SmartIsNull(NPC.NPCDef)then
    NPC.NPCDef := SmartGetFieldObject(NPC.Obj, hook_npc_NPCDef);
  Result := NPC.NPCDef;
end;

function NPC_GetLevel(NPC: TOpenNPC): Integer;
begin
  if(NPC.Level = -1)then
    NPC.Level := SmartGetFieldInt(NPC.Obj, hook_npc_GetLevel);
  Result := NPC.Level;
end;
/////////////////////////////////



//function under the NPCDef class.
function NPC_GetID(NPC: TOpenNPC): Integer;
var
  Def: Integer;
begin
  if(NPC.ID = -1)then
  begin
    Def := NPC_GetNPCDef(NPC);
    NPC.ID := SmartGetFieldInt(Def, hook_npcdef_GetID);
  end;
  Result := NPC.ID;
end;

function NPC_GetName(NPC: TOpenNPC): String;
var
  Def: Integer;
  Bytes: Integer;
begin
  Result := '';
  if(NPC.Name = '')then
  begin
    Def := NPC_GetNPCDef(NPC);
    Bytes := SmartGetFieldObject(Def, hook_npcdef_GetName);
    if not SmartIsNull(Bytes)then
    begin
      NPC.Name := R_GetJavaString(Bytes, 512);
      SmartFreeObject(Bytes);
    end;
  end;
  Result := NPC.Name;
end;
//////////////////////////////////

procedure FreeOpenNPCS(NPCs: TOpenNPCArray);
var
  I: Integer;
begin
  for I := 0 to High(NPCs)do
    NPC_Free(NPCs[I]);
end;
